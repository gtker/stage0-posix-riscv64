## Copyright (C) 2021 Ekaitz Zarraga
## Copyright (C) 2021 Andrius Å tikonas
## Copyright (C) 2022 Gabriel Wicki
## This file is part of stage0.
##
## stage0 is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## stage0 is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with stage0.  If not, see <http://www.gnu.org/licenses/>.
# Compile this thing with -nostdlib


; Register use:
; s2: input fd
; s3: output fd
; s4: toggle
; s5: hold

; Uses top of the stack as i/o buffer

## ELF Header

:ELF_base
7F 45 4C 46        ## e_ident[EI_MAG0-3] ELF's magic number

02                 ## e_ident[EI_CLASS] Indicating 64 bit
01                 ## e_ident[EI_DATA] Indicating little endianness
01                 ## e_ident[EI_VERSION] Indicating original elf

03                 ## e_ident[EI_OSABI] Set at 3 because FreeBSD is strict
00                 ## e_ident[EI_ABIVERSION] Set at 0 because none cares

00 00 00 00 00 00 00 ## e_ident[EI_PAD]
02 00              ## e_type Indicating Executable
F3 00              ## e_machine Indicating RISC-V
01 00 00 00        ## e_version Indicating original elf

&_start 00 00 00 00 ## e_entry Address of the entry point (Number of bytes this header is + Base Address)
%ELF_program_headers>ELF_base 00 00 00 00 ## e_phoff Address of program header table
00 00 00 00 00 00 00 00 ## e_shoff Address of section header table

00 00 00 00        ## e_flags
40 00              ## e_ehsize Indicating our 64 Byte header

38 00              ## e_phentsize size of a program header table
01 00              ## e_phnum number of entries in program table

00 00              ## e_shentsize size of a section header table
00 00              ## e_shnum number of entries in section table

00 00              ## e_shstrndx index of the section names

## Program Header
:ELF_program_headers
01 00 00 00             ## p_type
07 00 00 00             ## ph_flags: PF-X|PF-W|PF-R = 7
00 00 00 00 00 00 00 00 ## p_offset

&ELF_base 00 00 00 00 ## p_vaddr
&ELF_base 00 00 00 00 ## p_physaddr

%ELF_end>ELF_base 00 00 00 00 ## p_filesz
%ELF_end>ELF_base 00 00 00 00 ## p_memsz

01 00 00 00 00 00 00 00 ## Required alignment

:_start
    # rd_s4 mv                 ; Initialize register
    .000A0000 13000000
    # rd_a1 rs1_sp !16 ld      ; Input file name
    .80050000 .00000100 .00000001 03300000

    ; Open input file and store FD in s2
    # rd_a7 !56 addi           ; sys_openat
    .80080000 .00008003 13000000
    # rd_a0 !-100 addi         ; AT_FDCWD
    .00050000 .0000C0F9 13000000
    # rd_a2 mv                 ; read only
    .00060000 13000000
    # ecall
    73000000
    # rd_s2 rs1_a0 mv          ; Save fd in s2 for later
    .00090000 .00000500 13000000

    ; Open output file and store the FD in s3
    # rd_a0 !-100 addi         ; AT_FDCWD
    .00050000 .0000C0F9 13000000
    # rd_a1 rs1_sp !24 ld      ; Output file (argument 3)
    .80050000 .00000100 .00008001 03300000
    # rd_a2 !577 addi          ; octal 00001101
    .00060000 .00001024 13000000
    ; O_TRUNC   00001000
    ; O_CREAT   00000100
    ; O_WRONLY  00000001
    ; OCTAL!
    # rd_a3 !448 addi          ; Set read, write, execute permission on user
    .80060000 .0000001C 13000000
    ; S_IRWXU  00700
    ; OCTAL!
    # ecall
    73000000
    # rd_s3 rs1_a0 mv          ; Save fd in s3 for later
    .80090000 .00000500 13000000

:next_byte
    # rd_a7 !63 addi           ; sys_read
    .80080000 .0000F003 13000000
    # rd_a0 rs1_s2 mv          ; File descriptor
    .00050000 .00000900 13000000
    # rd_a1 rs1_sp mv          ; Buffer
    .80050000 .00000100 13000000
    # rd_a2 !1 addi            ; Size of what we want to read (set for all subsequent syscalls)
    .00060000 .00001000 13000000
    # ecall
    73000000

    ; If the file ended (0 bytes read) terminate
    # rs1_a0 @terminate beqz
    .00000500 @terminate 63000000

    ; Check if it's a comment
    # rd_a0 rs1_sp lb
    .00050000 .00000100 03000000
    # rd_t0 !0x23 addi
    .80020000 .00003002 13000000
    # rs1_a0 rs2_t0 @loop beq  ; a0 eq to '#'
    .00000500 .00005000 @loop 63000000
    # rd_t0 !0x3B addi
    .80020000 .0000B003 13000000
    # rs1_a0 rs2_t0 @loop beq  ; a0 eq to ';'
    .00000500 .00005000 @loop 63000000
    # $not_comment jal
    $not_comment 6F000000
:loop
        # rd_a0 rs1_s2 mv              ; File descriptor
        .00050000 .00000900 13000000
        # ecall                        ; sys_read
        73000000

        ; If the file ended (0 bytes read) terminate
        # rs1_a0 @terminate beqz
        .00000500 @terminate 63000000
        ; Check if read byte is the end of the comment (i.e. a newline character),
        ; in that case we continue processing
        # rd_a0 rs1_sp lb
        .00050000 .00000100 03000000
        # rd_t0 !0xA addi
        .80020000 .0000A000 13000000
        # rs1_a0 rs2_t0 @next_byte beq ; a0 eq to \n
        .00000500 .00005000 @next_byte 63000000
        # rd_t0 !0xD addi
        .80020000 .0000D000 13000000
        # rs1_a0 rs2_t0 @next_byte beq ; a0 eq to \r
        .00000500 .00005000 @next_byte 63000000
    # $loop jal
    $loop 6F000000
:not_comment
    ; Check if it's a hex character:
    ; in the case it's not, ignores and reads next byte
    # rd_a0 rs1_sp lb
    .00050000 .00000100 03000000

    ; Is it between '0' and '9'?
    # rd_t0 !48 addi           ; '0' character
    .80020000 .00000003 13000000
    # rs1_a0 rs2_t0 @uppercase_alpha blt
    .00000500 .00005000 @uppercase_alpha 63400000
    # rd_t0 !57 addi           ; '9' character
    .80020000 .00009003 13000000
    # rs1_t0 rs2_a0 @uppercase_alpha blt
    .00800200 .0000A000 @uppercase_alpha 63400000
    # rd_a0 rs1_a0 !-48 addi
    .00050000 .00000500 .000000FD 13000000
    # $hex_read jal
    $hex_read 6F000000
:uppercase_alpha
    ; Is it between 'A' and 'F'?
    # rd_t0 !65 addi           ; 'A' character
    .80020000 .00001004 13000000
    # rs1_a0 rs2_t0 @lowercase_alpha blt
    .00000500 .00005000 @lowercase_alpha 63400000
    # rd_t0 !70 addi           ; 'F' character
    .80020000 .00006004 13000000
    # rs1_t0 rs2_a0 @lowercase_alpha blt
    .00800200 .0000A000 @lowercase_alpha 63400000
    # rd_a0 rs1_a0 !-55 addi
    .00050000 .00000500 .000090FC 13000000
    # $hex_read jal
    $hex_read 6F000000
:lowercase_alpha
    ; Is it between 'a' and 'f'?
    # rd_t0 !97 addi           ; 'a' character
    .80020000 .00001006 13000000
    # rs1_a0 rs2_t0 @next_byte blt ; Not hex, continue reading
    .00000500 .00005000 @next_byte 63400000
    # rd_t0 !102 addi          ; 'f' character
    .80020000 .00006006 13000000
    # rs1_t0 rs2_a0 @next_byte blt ; Not hex, continue reading
    .00800200 .0000A000 @next_byte 63400000
    # rd_a0 rs1_a0 !-87 addi
    .00050000 .00000500 .000090FA 13000000
:hex_read
    ; END check hex -- leaves the half byte in a0

    # rs1_s4 @combine bnez     ; if toggle != 0 -> combine
    .00000A00 @combine 63100000
    ; Toggle == 0, we need to prepare for later
    # rd_s5 rs1_a0 mv          ; Load hold
    .800A0000 .00000500 13000000

    # rd_s4 !1 addi              ; Set toggle
    .000A0000 .00001000 13000000
    # $next_byte jal           ; Read next byte
    $next_byte 6F000000

:combine
    ; Combine half bytes
    # rd_a1 rs1_s5 rs2_x4 slli ; Shift logical left 4 times
    .80050000 .00800A00 .00004000 13100000
    # rd_a0 rs1_a0 rs2_a1 add  ; Combine two half bytes
    .00050000 .00000500 .0000B000 33000000
    ; Leaves the full byte in a0

    ; Values are combined, now we write in the file
    # rs1_sp rs2_a0 sb         ; Store prepared byte in buffer
    .00000100 .0000A000 23000000
    # rd_a7 !64 addi           ; sys_write
    .80080000 .00000004 13000000
    # rd_a0 rs1_s3 mv          ; file descriptor (stdout)
    .00050000 .00800900 13000000
    # rd_a1 rs1_sp mv          ; string address
    .80050000 .00000100 13000000
    # ecall
    73000000

    ; Update globals
    # rd_s4 mv                 ; Clear toggle
    .000A0000 13000000
    # rd_s5 mv                 ; Clear hold
    .800A0000 13000000

    ; Read next byte
    # $next_byte jal
    $next_byte 6F000000

:terminate
    ; Terminate program with 0 return code
    # rd_a7 !93 addi           ; sys_exit
    .80080000 .0000D005 13000000
    # ecall
    73000000
# PROGRAM END

:ELF_end

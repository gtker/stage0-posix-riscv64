## Copyright (C) 2021 Andrius Å tikonas
## This file is part of stage0.
##
## stage0 is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## stage0 is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with stage0.  If not, see <http://www.gnu.org/licenses/>.

## ELF Header

:ELF_base
7F 45 4C 46        ## e_ident[EI_MAG0-3] ELF's magic number

02                 ## e_ident[EI_CLASS] Indicating 64 bit
01                 ## e_ident[EI_DATA] Indicating little endianness
01                 ## e_ident[EI_VERSION] Indicating original elf

03                 ## e_ident[EI_OSABI] Set at 3 because FreeBSD is strict
00                 ## e_ident[EI_ABIVERSION] Set at 0 because none cares

00 00 00 00 00 00 00 ## e_ident[EI_PAD]
02 00              ## e_type Indicating Executable
F3 00              ## e_machine Indicating RISC-V
01 00 00 00        ## e_version Indicating original elf

&_start 00 00 00 00 ## e_entry Address of the entry point (Number of bytes this header is + Base Address)
%ELF_program_headers>ELF_base 00 00 00 00 ## e_phoff Address of program header table
00 00 00 00 00 00 00 00 ## e_shoff Address of section header table

00 00 00 00        ## e_flags
40 00              ## e_ehsize Indicating our 64 Byte header

38 00              ## e_phentsize size of a program header table
01 00              ## e_phnum number of entries in program table

00 00              ## e_shentsize size of a section header table
00 00              ## e_shnum number of entries in section table

00 00              ## e_shstrndx index of the section names

## Program Header
:ELF_program_headers
01 00 00 00             ## p_type
07 00 00 00             ## ph_flags: PF-X|PF-W|PF-R = 7
00 00 00 00 00 00 00 00 ## p_offset

&ELF_base 00 00 00 00 ## p_vaddr
&ELF_base 00 00 00 00 ## p_physaddr

%ELF_end>ELF_base 00 00 00 00 ## p_filesz
%ELF_end>ELF_base 00 00 00 00 ## p_memsz

01 00 00 00 00 00 00 00 ## Required alignment

:ELF_text
:_start

# Register use:
# s2: input fd
# s3: status
# s4: command_done
# s6: malloc pointer

# M1 instructions are encoded into RISC-V words rather than individual hex characters.
# E.g. rd_a0 rs1_sp ld = 00050000 + 00000100 + 03300000 = 03350100

    03 36 01 01     # rd_a2 rs1_sp !16 ld               ; Input file name

    @_start_out 63 10 06 00   # rs1_a2 @_start_out bnez           ; Use input file if specified
    # Else use kaem.riscv64
    ~default_file 17 06 00 00 # rd_a2 ~default_file auipc         ; load address of default_file
    !default_file 13 06 06 00 # rd_a2 rs1_a2 !default_file addi   ; into register a2

:_start_out

    # Open input file and store FD in s2
    93 08 80 03     # rd_a7 !56 addi                    ; sys_openat
    13 05 C0 F9     # rd_a0 !-100 addi                  ; AT_FDCWD
    93 05 06 00     # rd_a1 rs1_a2 mv                   ; file name
    13 06 00 00     # rd_a2 addi                        ; read only
    73 00 00 00     # ecall                             ; syscall
    @Fail 63 40 05 00 # rs1_a0 @Fail bltz               ; Error opening file
    13 09 05 00     # rd_s2 rs1_a0 mv                   ; Save fd in for later

    # Prepare heap memory
    93 08 60 0D     # rd_a7 !214 addi                   ; sys_brk
    13 05 00 00     # rd_a0 mv                          ; Get current brk
    73 00 00 00     # ecall                             ; syscall
    13 0B 05 00     # rd_s6 rs1_a0 mv                   ; Set our malloc pointer

# Using a1 for tokens and a2 for tokens[i]
:main_loop
    13 05 10 00     # rd_a0 !1 addi                     ; 256 * sizeof(char*)
    # rd_a0 rs1_a0 11 slli # replace 11 with 11-th register in rs2
    13 15 B5 00     # rd_a0 rs1_a0 rs2_a1 slli          ; 2048 = 1 << 11
    $malloc EF 00 00 00 # rd_ra $malloc jal             ; allocate space
    93 05 05 00     # rd_a1 rs1_a0 mv                   ; set tokens pointer
    13 06 05 00     # rd_a2 rs1_a0 mv                   ; set tokens[i] pointer (i=0)

    93 09 00 00     # rd_s3 mv                          ; status = 0
    13 0A 00 00     # rd_s4 mv                          ; command_done = 0

:collect_command
    $collect_token EF 00 00 00 # rd_ra $collect_token jal ; Get another token
    @collect_command_comment 63 00 05 00 # rs1_a0 @collect_command_comment beqz ; if NULL == result then it is a comment, don't store

    23 30 A6 00     # rs1_a2 rs2_a0 sd                  ; tokens[i] = result
    13 06 86 00     # rd_a2 rs1_a2 !8 addi              ; i = i + 1 (sizeof(char*) = 8)

:collect_command_comment
    @collect_command 63 00 0A 00 # rs1_s4 @collect_command beqz ; keep looping if 0 == command_done

    # Deal with line comments
    @main_loop 63 80 C5 00 # rs1_a1 rs2_a2 @main_loop beq ; keep looping if comment

    $print_command EF 00 00 00 # rd_ra $print_command jal ; print the command
    03 B5 05 00     # rd_a0 rs1_a1 ld                   ; program = tokens[0]
    @Fail 63 00 05 00 # rs1_a0 @Fail beqz               ; Error, no program

    13 01 81 FF     # rd_sp rs1_sp !-8 addi             ; allocate stack
    23 30 B1 00     # rs1_sp rs2_a1 sd                  ; protect tokens

    93 08 C0 0D     # rd_a7 !220 addi                   ; sys_clone
    13 05 10 01     # rd_a0 !17 addi                    ; SIGCHLD flag
    93 05 00 00     # rd_a1 mv                          ; Child uses duplicate of parent's stack
    73 00 00 00     # ecall                             ; syscall

    83 35 01 00     # rd_a1 rs1_sp ld                   ; restore tokens
    13 01 81 00     # rd_sp rs1_sp !8 addi              ; deallocate stack

    @Fail 63 40 05 00 # rs1_a0 @Fail bltz               ; if f == -1 no child was created
    @collect_command_parent 63 10 05 00 # rs1_a0 @collect_command_parent bnez ; if f == 0 it is child

    # Deal with child case
    93 08 D0 0D     # rd_a7 !221 addi                   ; sys_execve
    03 B5 05 00     # rd_a0 rs1_a1 ld                   ; program = tokens[0]
    73 00 00 00     # ecall                             ; execve(program, tokens)
    $Fail EF 00 00 00 # rd_ra $Fail jal                 ; Exit with an error

:collect_command_parent
    93 08 40 10     # rd_a7 !260 addi                   ; sys_wait4
    13 06 00 00     # rd_a2 mv                          ; set options = 0
    93 06 00 00     # rd_a3 mv                          ; set *ruseage = NULL
    73 00 00 00     # ecall                             ; syscall

    # wait4 returns wstatus pointer, from which we can extract child's exit status
    # Check if child exited
    83 B5 05 00     # rd_a1 rs1_a1 ld                   ; Dereference wstatus pointer
    93 02 F0 07     # rd_t0 !0x7f addi                  ; t0 = 0x7f
    B3 F2 55 00     # rd_t0 rs1_a1 rs2_t0 and           ; WTERMSIG(s) ((s) & 0x7f)
    @abort 63 90 02 00 # rs1_t0 @abort bnez             ; Something went wrong, child did not exit

    # Check exit status: WEXITSTATUS(s) (((s) & 0xff00) >> 8)
    B7 02 01 00     # rd_t0 ~0xff00 lui                 ; 0xff00 = 0xffff - 0xff = 2^16 - 2^8
    9B 82 02 F0     # rd_t0 rs1_t0 !-256 addiw          ; t0 = 0xff00
    B3 F2 55 00     # rd_t0 rs1_a1 rs2_t0 and           ; (s) & 0xff00
    93 D9 82 00     # rd_s3 rs1_t0 rs2_x8 srli          ; Shift right by 8 to get status

    @main_loop 63 80 09 00 # rs1_s3 @main_loop beqz     ; Loop if 0 == status

:abort
    ~hard 17 05 00 00 # rd_a0 ~hard auipc               ; Get error string
    !hard 13 05 05 00 # rd_a0 rs1_a0 !hard addi         ; Get error string
    $File_Print EF 00 00 00 # rd_ra $File_Print jal     ; Print it
    $Fail 6F 00 00 00 # $Fail jal                       ; Exit with failure


# print_command function
# Receives tokens[j] in a1 and tokens[i] in a2
# Modifies a0
:print_command
    13 01 81 FE     # rd_sp rs1_sp !-24 addi            ; allocate stack
    23 30 11 00     # rs1_sp rs2_ra sd                  ; protect ra
    23 34 B1 00     # rs1_sp rs2_a1 @8 sd               ; protect a1
    23 38 C1 00     # rs1_sp rs2_a2 @16 sd              ; protect a2

    ~prefix 17 05 00 00 # rd_a0 ~prefix auipc           ; Get prefix " +> "
    !prefix 13 05 05 00 # rd_a0 rs1_a0 !prefix addi     ; Get prefix " +> "
    $File_Print EF 00 00 00 # rd_ra $File_Print jal     ; print it

:print_command_loop
    03 B5 05 00     # rd_a0 rs1_a1 ld                   ; get tokens[j]
    $File_Print EF 00 00 00 # rd_ra $File_Print jal     ; print it
    93 85 85 00     # rd_a1 rs1_a1 !8 addi              ; j = j + 1
    13 05 00 02     # rd_a0 !32 addi                    ; a0 = ' '
    $fputc EF 00 00 00 # rd_ra $fputc jal               ; print it
    @print_command_loop 63 90 C5 00 # rs1_a1 rs2_a2 @print_command_loop bne ; continue if j < i, otherwise keep looping

    13 05 A0 00     # rd_a0 !10 addi                    ; a0 = '\n'
    $fputc EF 00 00 00 # rd_ra $fputc jal               ; print it

    83 30 01 00     # rd_ra rs1_sp ld                   ; restore ra
    83 35 81 00     # rd_a1 rs1_sp !8 ld                ; restore a1
    03 36 01 01     # rd_a2 rs1_sp !16 ld               ; restore a2
    13 01 81 01     # rd_sp rs1_sp !24 addi             ; deallocate stack
    67 80 00 00     # rs1_ra jalr                       ; return


# collect_token function
# Receives nothing
# Overwrites a0
# Uses a0 as c, a1 as token and a2 as token[i]
:collect_token
    13 01 81 FE     # rd_sp rs1_sp !-24 addi            ; allocate stack
    23 30 11 00     # rs1_sp rs2_ra sd                  ; protect ra
    23 34 B1 00     # rs1_sp rs2_a1 @8 sd               ; protect a1
    23 38 C1 00     # rs1_sp rs2_a2 @16 sd              ; protect a2

    37 15 00 00     # rd_a0 ~4096 lui                   ; 4096 * sizeof(char)
    $malloc EF 00 00 00 # rd_ra $malloc jal             ; allocate space
    93 05 05 00     # rd_a1 rs1_a0 mv                   ; token = malloc(max_string)
    13 06 05 00     # rd_a2 rs1_a0 mv                   ; i = 0; set token[i]

:collect_token_loop
    $fgetc EF 00 00 00 # rd_ra $fgetc jal               ; read character
    93 02 C0 FF     # rd_t0 !-4 addi                    ; if character == EOF
    @Done 63 00 55 00 # rs1_a0 rs2_t0 @Done beq         ; We are done

    93 02 00 02     # rd_t0 !32 addi                    ; if c == ' '
    @collect_token_done 63 00 55 00 # rs1_a0 rs2_t0 @collect_token_done beq ; Space terminates token

    93 02 90 00     # rd_t0 !9 addi                     ; if c == '\t'
    @collect_token_done 63 00 55 00 # rs1_a0 rs2_t0 @collect_token_done beq ; Tab terminates token

    93 02 A0 00     # rd_t0 !10 addi                    ; continue if c == '\n'
    @collect_token_comment 63 10 55 00 # rs1_a0 rs2_t0 @collect_token_comment bne ; otherwise check next

    # newline
    13 0A 10 00     # rd_s4 !1 addi                     ; command_done = true
    $collect_token_done 6F 00 00 00 # $collect_token_done jal ; Done with current command

:collect_token_comment
    93 02 30 02     # rd_t0 !35 addi                    ; if c == '#'
    @collect_token_escape 63 10 55 00 # rs1_a0 rs2_t0 @collect_token_escape bne ; otherwise check next

    # It is a line comment
    $collect_comment EF 00 00 00 # rd_ra $collect_comment jal ; Read whole comment
    13 0A 10 00     # rd_s4 !1 addi                     ; command_done = true
    $collect_token_done EF 00 00 00 # rd_ra $collect_token_done jal ; Done

:collect_token_escape
    93 02 C0 05     # rd_t0 !92 addi                    ; if c == '\'
    @collect_token_other 63 10 55 00 # rs1_a0 rs2_t0 @collect_token_other bne ; otherwise just store it

    # Escape character
    $fgetc EF 00 00 00 # rd_ra $fgetc jal               ; Read the char to drop
    $collect_token_done EF 00 00 00 # rd_ra $collect_token_done jal ; We are done

:collect_token_other
    23 00 A6 00     # rs1_a2 rs2_a0 sb                  ; token[i] = c
    13 06 16 00     # rd_a2 rs1_a2 !1 addi              ; i = i + 1
    $collect_token_loop 6F 00 00 00 # $collect_token_loop jal ; Read another character

:collect_token_done
    @collect_token_good 63 90 C5 00 # rs1_a1 rs2_a2 @collect_token_good bne ; return the token unless
    93 05 00 00     # rd_a1 mv                          ; i == 0, then token = NULL

:collect_token_good
    13 85 05 00     # rd_a0 rs1_a1 mv                   ; Return token
    83 30 01 00     # rd_ra rs1_sp ld                   ; Restore ra
    83 35 81 00     # rd_a1 rs1_sp !8 ld                ; Restore a1
    03 36 01 01     # rd_a2 rs1_sp !16 ld               ; Restore a2
    13 01 81 01     # rd_sp rs1_sp !24 addi             ; Deallocate stack
    67 80 00 00     # rs1_ra jalr                       ; return


# collect_comment function
# Receives nothing
# Modifies a0
# uses a0 as c
# Just throws away everything it reads
:collect_comment
    13 01 81 FF     # rd_sp rs1_sp !-8 addi             ; allocate stack
    23 30 11 00     # rs1_sp rs2_ra sd                  ; protect ra

    $fgetc EF 00 00 00 # rd_ra $fgetc jal               ; c = fgetc(input)
    93 02 C0 FF     # rd_t0 !-4 addi                    ; if c == EOF
    @Fail 63 00 55 00 # rs1_a0 rs2_t0 @Fail beq         ; Abort

    93 02 A0 00     # rd_t0 !10 addi                    ; if c == '\n'
    @collect_comment 63 10 55 00 # rs1_a0 rs2_t0 @collect_comment bne ; loop

    83 30 01 00     # rd_ra rs1_sp ld                   ; restore ra
    13 01 81 00     # rd_sp rs1_sp !8 addi              ; deallocate stack
    67 80 00 00     # rs1_ra jalr                       ; return


# fgetc function
# Loads FILE* from s2
# Returns -4 (EOF) or char in a0
:fgetc
    13 01 81 FE     # rd_sp rs1_sp !-24 addi            ; allocate stack
    23 34 B1 00     # rs1_sp rs2_a1 @8 sd               ; protect a1
    23 38 C1 00     # rs1_sp rs2_a2 @16 sd              ; protect a2

    93 08 F0 03     # rd_a7 !63 addi                    ; sys_read
    93 05 01 00     # rd_a1 rs1_sp mv                   ; Get stack address
    13 05 09 00     # rd_a0 rs1_s2 mv                   ; read from input file
    13 06 10 00     # rd_a2 !1 addi                     ; read 1 character
    73 00 00 00     # ecall                             ; syscall

    @fgetc_done 63 10 05 00 # rs1_a0 @fgetc_done bnez   ; Check if nothing was read

:fgetc_fail
    93 02 C0 FF     # rd_t0 !-4 addi                    ; Use -4 as EOF
    23 80 55 00     # rs1_a1 rs2_t0 sb                  ; Store EOF in *a1

:fgetc_done
    03 85 05 00     # rd_a0 rs1_a1 lb                   ; return char in a0
    83 35 81 00     # rd_a1 rs1_sp !8 ld                ; restore a1
    03 36 01 01     # rd_a2 rs1_sp !16 ld               ; restore a2
    13 01 81 01     # rd_sp rs1_sp !24 addi             ; deallocate stack
    67 80 00 00     # rs1_ra jalr                       ; return


# Malloc isn't actually required if the program being built fits in the initial memory
# However, it doesn't take much to add it.
# Requires MALLOC pointer to be initialized and a0 to have the number of desired bytes

:malloc
    13 01 81 FF     # rd_sp rs1_sp !-8 addi             ; allocate stack
    23 30 B1 00     # rs1_sp rs2_a1 sd                  ; protect a1

    93 05 0B 00     # rd_a1 rs1_s6 mv                   ; Store the current pointer
    33 05 65 01     # rd_a0 rs1_a0 rs2_s6 add           ; Request the number of desired bytes
    93 08 60 0D     # rd_a7 !214 addi                   ; sys_brk
    73 00 00 00     # ecall                             ; syscall
    13 0B 05 00     # rd_s6 rs1_a0 mv                   ; Set our malloc pointer
    13 85 05 00     # rd_a0 rs1_a1 mv                   ; Return the pointer

    83 35 01 00     # rd_a1 rs1_sp ld                   ; restore a1
    13 01 81 00     # rd_sp rs1_sp !8 addi              ; deallocate stack
    67 80 00 00     # rs1_ra jalr                       ; return

# File_Print function
# Receives CHAR* in a0
# calls fputc for every non-null char
:File_Print
    13 01 81 FE     # rd_sp rs1_sp !-24 addi            ; allocate stack
    23 30 11 00     # rs1_sp rs2_ra sd                  ; protect ra
    23 34 B1 00     # rs1_sp rs2_a1 @8 sd               ; protect a1
    23 38 C1 00     # rs1_sp rs2_a2 @16 sd              ; protect a2
    93 05 05 00     # rd_a1 rs1_a0 mv                   ; protect a0

    @File_Print_Done 63 00 05 00 # rs1_a0 @File_Print_Done beqz ; Protect against nulls

:File_Print_Loop
    03 C5 05 00     # rd_a0 rs1_a1 lbu                  ; Read byte
    @File_Print_Done 63 00 05 00 # rs1_a0 @File_Print_Done beqz ; Stop at NULL

    $fputc EF 00 00 00 # rd_ra $fputc jal               ; print it
    93 85 15 00     # rd_a1 rs1_a1 !1 addi              ; S = S + 1
    $File_Print_Loop 6F 00 00 00 # $File_Print_Loop jal ; Keep printing

:File_Print_Done
    83 30 01 00     # rd_ra rs1_sp ld                   ; restore ra
    83 35 81 00     # rd_a1 rs1_sp !8 ld                ; restore a1
    03 36 01 01     # rd_a2 rs1_sp !16 ld               ; restore a2
    13 01 81 01     # rd_sp rs1_sp !24 addi             ; deallocate stack
    67 80 00 00     # rs1_ra jalr                       ; return

# fputc function
# receives CHAR in a0 and load FILE* from stdout
# writes char and returns
:fputc
    13 01 81 FE     # rd_sp rs1_sp !-24 addi            ; allocate stack
    23 30 A1 00     # rs1_sp rs2_a0 sd                  ; protect a0
    23 34 B1 00     # rs1_sp rs2_a1 @8 sd               ; protect a1
    23 38 C1 00     # rs1_sp rs2_a2 @16 sd              ; protect a2

    93 08 00 04     # rd_a7 !64 addi                    ; sys_write
    13 05 10 00     # rd_a0 !1 addi                     ; write to stdout
    93 05 01 00     # rd_a1 rs1_sp mv                   ; Get stack address
    13 06 10 00     # rd_a2 !1 addi                     ; write 1 character
    73 00 00 00     # ecall                             ; syscall

    03 35 01 00     # rd_a0 rs1_sp ld                   ; restore a0
    83 35 81 00     # rd_a1 rs1_sp !8 ld                ; restore a1
    03 36 01 01     # rd_a2 rs1_sp !16 ld               ; restore a2
    13 01 81 01     # rd_sp rs1_sp !24 addi             ; deallocate stack
    67 80 00 00     # rs1_ra jalr                       ; return

:Done
    # Terminate program with 0 return code
    93 08 D0 05     # rd_a7 !93 addi                    ; sys_exit
    13 05 00 00     # rd_a0 mv                          ; Return code 0
    73 00 00 00     # ecall                             ; syscall

:Fail
    # Terminate program with 1 return code
    93 08 D0 05     # rd_a7 !93 addi                    ; sys_exit
    13 05 10 00     # rd_a0 !1 addi                     ; Return code 1
    73 00 00 00     # ecall                             ; syscall
# PROGRAM END

:default_file
    6B 61 65 6D 2E 72 69 73 63 76 36 34 00                          ; kaem.riscv64
:prefix
    20 2B 3E 20 00                                      ; " +> "
:hard
    53 75 62 70 72 6F 63 65 73 73 20 65 72 72 6F 72 0A  ; "Subprocess error"
    41 42 4F 52 54 49 4E 47 20 48 41 52 44 0A           ; "ABORTING HARD"
    00
:ELF_end
:ELF_sym
:ELF_str

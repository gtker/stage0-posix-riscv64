## Copyright (C) 2021 Andrius Å tikonas
## This file is part of stage0.
##
## stage0 is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## stage0 is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with stage0.  If not, see <http://www.gnu.org/licenses/>.

; Where the ELF Header is going to hit
; Simply jump to _start
; Our main function
:_start

; Register use:
; s1: jump table
; s2: input fd
; s3: output fd
; s4: toggle
; s5: hold
; s6: ip
; s7: tempword
; s8: shiftregister
; s9: malloc pointer
; s10: updates

; Struct format: (size 24)
; next => 0                      ; Next element in linked list
; target => 8                    ; Target (ip)
; name => 16                     ; Label name

    rd_a2 rs1_sp !16 ld               ; Input file name

    ; Initialize globals
    rd_s4 !-1 addi                    ; Toggle
    rd_s5 addi                        ; Hold
    rd_s6 ~0x600000 lui               ; Instruction Pointer

    ; Open input file and store FD in s2
    rd_a7 !56 addi                    ; sys_openat
    rd_a0 !-100 addi                  ; AT_FDCWD
    rd_a1 rs1_a2 mv                   ; file name
    rd_a2 addi                        ; read only
    ecall                             ; syscall
    rs1_a0 @Fail bltz                 ; Error opening file
    rd_s2 rs1_a0 mv                   ; Save fd in for later

    ; Set default FD for output file to stdout
    rd_s3 !1 addi

    ; If we only have 2 arguments, don't use the third (it's not set)
    rd_t0 !2 addi
    rd_a0 rs1_sp ld                   ; Get number of the args
    rs1_a0 rs2_t0 @Fail blt           ; No input file provided
    rs1_a0 rs2_t0 @after_open beq     ; No output file provided. Use stdout

    ; Open output file and store the FD in s3
    rd_a7 !56 addi                    ; sys_openat
    rd_a0 !-100 addi                  ; AT_FDCWD
    rd_a1 rs1_sp !24 ld               ; Output file (argument 3)
    rd_a2 !577 addi                   ; octal 00001101
    ; O_TRUNC   00001000
    ; O_CREAT   00000100
    ; O_WRONLY  00000001
    ; OCTAL!
    rd_a3 !448 addi                   ; Set read, write, execute permission on user
    ; S_IRWXU  00700
    ; OCTAL!
    ecall                             ; syscall
    rd_s3 rs1_a0 mv                   ; Save fd in for later

:after_open
    ; Prepare heap memory
    rd_a7 !214 addi                   ; sys_brk
    rd_a0 addi                        ; Get current brk
    ecall                             ; syscall
    rd_s9 rs1_a0 addi                 ; Set our malloc pointer

    rd_a1 ~0x100000 lui
    rd_a0 rs1_a0 rs2_a1 add           ; Request the 1 MiB
    rd_a7 !214 addi                   ; sys_brk
    ecall                             ; syscall

    rd_ra $ClearScratch jal           ; Zero scratch
    rd_ra $First_pass jal             ; First pass

    ; Rewind input file
    rd_a7 !62 addi                    ; sys_lseek
    rd_a0 rs1_s2 mv                   ; Input file descriptor
    rd_a1 mv                          ; Set offset to zero
    rd_a2 mv                          ; Set whence to zero
    ecall                             ; syscall

    ; Initialize globals
    rd_s4 !-1 addi                    ; Toggle
    rd_s5 addi                        ; Hold
    rd_s6 ~0x600000 lui               ; Instruction Pointer
    rd_s7 addi                        ; tempword
    rd_s8 addi                        ; Shift register

    rd_ra $Second_pass jal            ; Now do the second pass

    ; Terminate program with 0 return code
    rd_a7 !93 addi                    ; sys_exit
    rd_a0 mv                          ; Return code 0
    ecall                             ; exit(0)

; First pass loop to determine addresses of labels
:First_pass
    rd_sp rs1_sp !-8 addi             ; Allocate stack
    rs1_sp rs2_ra sd                  ; protect ra

:First_pass_loop
    rd_ra $Read_byte jal              ; Get another byte

    ; Deal with EOF
    rd_t1 !-4 addi
    rs1_a0 rs2_t1 @First_pass_done beq

    ; Check for :
    rd_t1 !0x3A addi
    rs1_a0 rs2_t1 @StoreLabel beq     ; Store this label

    ; Check for .
    rd_t1 !0x2E addi
    rs1_a0 rs2_t1 @First_pass_UpdateWord beq

    ; Check for %
    rd_t1 !0x25 addi
    rs1_a0 rs2_t1 @First_pass_pointer beq

    ; Check for &
    rd_t1 !0x26 addi
    rs1_a0 rs2_t1 @First_pass_pointer beq

    ; Check for !
    rd_t1 !0x21 addi
    rs1_a0 rs2_t1 @Throwaway_token beq

    ; Check for @
    rd_t1 !0x40 addi
    rs1_a0 rs2_t1 @Throwaway_token beq

    ; Check for $
    rd_t1 !0x24 addi
    rs1_a0 rs2_t1 @Throwaway_token beq

    ; Check for ~
    rd_t1 !0x7E addi
    rs1_a0 rs2_t1 @Throwaway_token beq

    ; Check for <
    rd_t1 !0x3C addi
    rd_a1 !-1 addi                    ; write = false
    rs1_a0 rs2_t1 @PadToAlign beq

    rd_a1 !-1 addi                    ; write = false
    rd_a2 !-1 addi                    ; update = false
    rd_ra $DoByte jal                 ; Deal with everything else

    rd_t1 !-4 addi                    ; Deal with EOF
    rs1_a0 rs2_t1 @First_pass_done beq

    $First_pass_loop jal              ; Keep looping

:Throwaway_token
    rd_a1 ~scratch auipc
    rd_a1 rs1_a1 !scratch addi        ; get scratch
    rd_ra $consume_token jal          ; Read token
    rd_ra $ClearScratch jal           ; Throw away token
    $First_pass_loop jal              ; Loop again

:First_pass_pointer
    rd_s6 rs1_s6 !4 addi              ; Update ip
    ; Deal with Pointer to label
    rd_a1 ~scratch auipc
    rd_a1 rs1_a1 !scratch addi        ; Using scratch
    rd_ra $consume_token jal          ; Read token
    rd_ra $ClearScratch jal           ; Throw away token
    rd_t1 !0x3E addi                  ; Check for '>'
    rs1_a0 rs2_t1 @First_pass_loop bne ; Loop again

    ; Deal with %label>label case
    rd_a1 ~scratch auipc
    rd_a1 rs1_a1 !scratch addi        ; Using scratch
    rd_ra $consume_token jal          ; Read token
    rd_ra $ClearScratch jal           ; Throw away token
    $First_pass_loop jal              ; Loop again

:First_pass_UpdateWord
    rd_s10 addi                       ; updates = 0
    rd_s7 addi                        ; tempword = 0
    rd_a5 !4 addi                     ; a5 = 4
:First_pass_UpdateWord_loop
    rd_ra $Read_byte jal              ; Read another byte into a0

    rd_a1 !-1 addi                    ; write = false
    rd_a2 addi                        ; update = true
    rd_ra $DoByte jal                 ; Process byte
    rs1_s10 rs2_a5 @First_pass_UpdateWord_loop blt ; loop 4 times

    rd_s6 rs1_s6 !-4 addi             ; ip = ip - 4

    $First_pass_loop jal              ; Loop again

:First_pass_done
    rd_ra rs1_sp ld                   ; restore ra
    rd_sp rs1_sp !8 addi              ; deallocate stack
    rs1_ra jalr                       ; return

:Second_pass
    rd_sp rs1_sp !-8 addi             ; Allocate stack
    rs1_sp rs2_ra sd                  ; protect ra

:Second_pass_loop
    rd_ra $Read_byte jal              ; Read another byte

    ; Deal with EOF
    rd_t1 !-4 addi                    ; Deal with EOF
    rs1_a0 rs2_t1 @Second_pass_done beq

    ; Drop the label
    rd_t1 !0x3A addi
    rs1_a0 rs2_t1 @Second_pass_0 bne

    rd_a1 ~scratch auipc
    rd_a1 rs1_a1 !scratch addi        ; Using scratch
    rd_ra $consume_token jal          ; Read the label
    rd_ra $ClearScratch jal           ; Throw away token

    $Second_pass_loop jal             ; Continue looping

:Second_pass_0
    ; Check for '.'
    rd_t1 !0x2E addi
    rs1_a0 rs2_t1 @Second_pass_UpdateWord beq

    ; Check for %
    rd_t1 !0x25 addi
    rs1_a0 rs2_t1 @StorePointer beq

    ; Check for &
    rd_t1 !0x26 addi
    rs1_a0 rs2_t1 @StorePointer beq

    ; Check for !
    rd_t1 !0x21 addi
    rs1_a0 rs2_t1 @UpdateShiftRegister beq

    ; Check for @
    rd_t1 !0x40 addi
    rs1_a0 rs2_t1 @UpdateShiftRegister beq

    ; Check for $
    rd_t1 !0x24 addi
    rs1_a0 rs2_t1 @UpdateShiftRegister beq

    ; Check for ~
    rd_t1 !0x7E addi
    rs1_a0 rs2_t1 @UpdateShiftRegister beq

    ; Check for <
    rd_t1 !0x3C addi
    rd_a1 addi                        ; write = true
    rs1_a0 rs2_t1 @PadToAlign beq

    ; Deal with everything else
    rd_a1 addi                        ; write = true
    rd_a2 !-1 addi                    ; update = false
    rd_ra $DoByte jal                 ; Process our char

    # Deal with EOF
    rd_t1 !-4 addi
    rs1_a0 rs2_t1 @Second_pass_done beq ; We are done

    $Second_pass_loop jal             ; continue looping

:Second_pass_UpdateWord
    rd_s10 addi                       ; updates = 0
    rd_s7 addi                        ; tempword = 0
    rd_a5 !4 addi                     ; a5 = 4

:Second_pass_UpdateWord_loop
    rd_ra $Read_byte jal              ; Read another byte into a0

    rd_a1 !-1 addi                    ; write = false
    rd_a2 addi                        ; update = true
    rd_ra $DoByte jal                 ; Process byte
    rs1_s10 rs2_a5 @Second_pass_UpdateWord_loop blt ; loop 4 times

    rd_a0 rs1_s7 mv                   ; tempword
    $UpdateShiftRegister_DOT jal      ; UpdateShiftRegister('.', tempword)

:UpdateShiftRegister
    rd_a2 rs1_a0 mv                   ; Store label prefix
    rd_a1 ~scratch auipc
    rd_a1 rs1_a1 !scratch addi        ; Get scratch
    rd_ra $ClearScratch jal           ; Clear scratch
    rd_ra $consume_token jal          ; Read token
    rd_ra $GetTarget jal              ; Get target
    rd_a0 rs1_a0 ld                   ; Dereference pointer
    rd_a0 rs1_a0 rs2_s6 sub           ; target - ip

    ; Check for !
    rd_t1 !0x21 addi
    rs1_a2 rs2_t1 @UpdateShiftRegister_I beq

    ; Check for @
    rd_t1 !0x40 addi
    rs1_a2 rs2_t1 @UpdateShiftRegister_B beq

    ; Check for $
    rd_t1 !0x24 addi
    rs1_a2 rs2_t1 @UpdateShiftRegister_J beq

    ; Check for ~
    rd_t1 !0x7E addi
    rs1_a2 rs2_t1 @UpdateShiftRegister_U beq

    $Second_pass_loop jal             ; continue looping

:UpdateShiftRegister_DOT
    ; . before instruction means it has to be added to the final word

    ; swap = (((value >> 24) & 0xff) |
    ;        ((value << 8) & 0xff0000) |
    ;        ((value >> 8) & 0xff00) |
    ;        ((value << 24) & 0xff000000))

    rd_t2 rs1_a0 rs2_x24 srliw        ; value >> 24
    rd_t1 !0xFF addi                  ; t1 = 0xff
    rd_t0 rs1_t1 rs2_t2 and           ; (value >> 24) & 0xff

    rd_t2 rs1_a0 rs2_x8 slliw         ; value << 8
    rd_t1 ~0xFF0000 lui               ; t1 = 0xff0000
    rd_t2 rs1_t1 rs2_t2 and           ; (value << 8) & 0xff0000
    rd_t0 rs1_t0 rs2_t2 or            ; logical or with the previous expression

    rd_t2 rs1_a0 rs2_x8 srliw         ; value >> 8
    rd_t1 ~0xFF00 lui                 ; t1 = 0xff00
    rd_t1 rs1_t1 !0xFF00 addiw        ; t1 = 0xff00
    rd_t2 rs1_t1 rs2_t2 and           ; (value << 8) & 0xff00
    rd_t0 rs1_t0 rs2_t2 or            ; logical or with the previous expression

    rd_t2 rs1_a0 rs2_x24 slliw        ; value << 24
    rd_t1 !0xFF addi
    rd_t1 rs1_t1 rs2_x24 slli         ; t1 = 0xff000000
    rd_t2 rs1_t1 rs2_t2 and           ; (value << 24) & 0xff000000
    rd_t0 rs1_t0 rs2_t2 or            ; swap

    rd_s8 rs1_s8 rs2_t0 xor           ; shiftregister = shiftregister ^ swap

    rd_s6 rs1_s6 !-4 addi             ; ip = ip - 4
    $Second_pass_loop jal             ; continue looping

:UpdateShiftRegister_I
    ; Corresponds to RISC-V I format
    rd_a0 rs1_a0 !4 addiw             ; add 4 due to this being 2nd part of auipc combo

    rd_t1 ~0xFFF lui                  ; load higher bits
    rd_t1 rs1_t1 !0xFFF addiw
    rd_t1 rs1_a0 rs2_t1 and           ; (value & 0xfff)
    rd_s7 rs1_t1 rs2_x20 slliw        ; tempword = (value & 0xfff) << 20
    rd_s8 rs1_s8 rs2_s7 xor           ; shiftregister = shiftregister ^ tempword

    $Second_pass_loop jal             ; continue looping

:UpdateShiftRegister_B
    ; Corresponds to RISC-V B format

    ; tempword = ((value & 0x1e) << 7)            ; imm[4:1]
    ;          | ((value & 0x7e0) << (31 - 11))   ; imm[10:5]
    ;          | ((value & 0x800) >> 4)           ; imm[11]
    ;          | ((value & 0x1000) << (31 - 12))  ; imm[12]

    rd_t1 !0x1E addi
    rd_t1 rs1_a0 rs2_t1 and           ; value & 0x1e
    rd_t0 rs1_t1 rs2_x7 slliw         ; tempword = (value & 0x1e) << 7

    rd_t1 !0x7E0 addi
    rd_t1 rs1_a0 rs2_t1 and           ; value & 0x7e0
    rd_t1 rs1_t1 rs2_x20 slliw        ; (value & 0x7e0) << (31 - 11)
    rd_t0 rs1_t0 rs2_t1 or            ; logical or with the previous expression

    rd_t1 ~0x800 lui                  ; load higher bits
    rd_t1 rs1_t1 !0x800 addiw
    rd_t1 rs1_a0 rs2_t1 and           ; value & 0x800
    rd_t1 rs1_t1 rs2_x4 srliw         ; (value & 0x800) >> 4
    rd_t0 rs1_t0 rs2_t1 or            ; logical or with the previous expression

    rd_t1 ~0x1000 lui                 ; load higher bits
    rd_t1 rs1_a0 rs2_t1 and           ; value & 0x1000
    rd_t1 rs1_t1 rs2_x19 slliw        ; (value & 0x1000) << (31 - 12)
    rd_s7 rs1_t0 rs2_t1 or            ; logical or with the previous expression

    rd_s8 rs1_s8 rs2_s7 xor           ; shiftregister = shiftregister ^ tempword

    $Second_pass_loop jal             ; continue looping

:UpdateShiftRegister_J
    ; Corresponds to RISC-V J format

    ; tempword = ((value & 0x7fe) << (30 - 10))    ; imm[10:1]
    ;          | ((value & 0x800) << (20 - 11))    ; imm[11]
    ;          | ((value & 0xff000))               ; imm[19:12]
    ;          | ((value & 0x100000) << (31 - 20)) ; imm[20]

    rd_t1 !0x7FE addi
    rd_t1 rs1_a0 rs2_t1 and           ; value & 0x7fe
    rd_t0 rs1_t1 rs2_x20 slliw        ; tempword = (value & 0x7fe) << 20

    rd_t1 ~0x800 lui                  ; load higher bits
    rd_t1 rs1_t1 !0x800 addiw
    rd_t1 rs1_a0 rs2_t1 and           ; value & 0x800
    rd_t1 rs1_t1 rs2_x9 slliw         ; (value & 0x800) << (20 - 11)
    rd_t0 rs1_t0 rs2_t1 or            ; logical or with the previous expression

    rd_t1 ~0xFF000 lui                ; load higher bits
    rd_t1 rs1_a0 rs2_t1 and           ; value & 0xff000
    rd_t0 rs1_t0 rs2_t1 or            ; logical or with the previous expression

    rd_t1 ~0x100000 lui               ; load higher bits
    rd_t1 rs1_a0 rs2_t1 and           ; value & 0x100000
    rd_t1 rs1_t1 rs2_x11 slliw        ; (value & 0x100000) << (31 - 20)
    rd_s7 rs1_t0 rs2_t1 or            ; logical or with the previous expression

    rd_s8 rs1_s8 rs2_s7 xor           ; shiftregister = shiftregister ^ tempword

    $Second_pass_loop jal             ; continue looping

:UpdateShiftRegister_U
    ; Corresponds to RISC-V U format
    ; if value is 0x800 or more we have to add 11-th bit (0x1000) to compensate for signed extension

    rd_t0 ~0x800 lui                  ; load higher bits
    rd_t0 rs1_t0 !0x800 addiw
    rd_t1 ~0xFFF lui                  ; load higher bits
    rd_t1 rs1_t1 !0xFFF addiw

    ; We are outside 31-bit that ~ can normally load
    rd_t2 ~0x100000 lui               ; load 0xfffff000
    rd_t2 rs1_t2 !-1 addiw            ; load 0xfffff000
    rd_t2 rs1_t2 rs2_x12 slli         ; load 0xfffff000
    rd_t1 rs1_a0 rs2_t1 and           ; value & 0xfff
    rd_s7 rs1_a0 rs2_t2 and           ; value & 0xfffff000
    rs1_t1 rs2_t0 @UpdateShiftRegister_U_small blt

    # Deal with sign extension: add 0x1000
    rd_t0 ~0x1000 lui                 ; load higher bits
    rd_s7 rs1_t0 rs2_s7 addw          ; tempword = (value & 0xfffff000) + 0x1000

:UpdateShiftRegister_U_small
    rd_s8 rs1_s8 rs2_s7 xor           ; shiftregister = shiftregister ^ tempword

    $Second_pass_loop jal             ; continue looping

:StorePointer
    rd_s6 rs1_s6 !4 addi              ; update ip
    rd_a2 rs1_a0 mv                   ; Store label prefix

    rd_a1 ~scratch auipc
    rd_a1 rs1_a1 !scratch addi        ; Get scratch
    rd_ra $ClearScratch jal           ; clear scratch
    rd_ra $consume_token jal          ; Read token
    rd_a5 rs1_a0 mv                   ; save char
    rd_ra $GetTarget jal              ; Get target
    rd_a1 rs1_a0 ld                   ; Dereference pointer

    ; If char is > then change relative base address to ip
    rd_t1 !0x3E addi                  ; t1 = 0x3e
    rs1_t1 rs2_a5 @StorePointer_1 beq

    ; Check for &
    rd_t1 !0x26 addi
    rs1_a2 rs2_t1 @StorePointer_0 beq

    ; Check for %
    rd_t1 !0x25 addi
    rs1_a2 rs2_t1 @Fail bne
    rd_a1 rs1_a1 rs2_s6 sub           ; displacement = target - ip

:StorePointer_0
    ; Output pointer
    rd_a5 !4 addi                     ; number of bytes
:StorePointer_loop
    rd_t1 rs1_a1 rs2_x8 srli          ; value / 256
    rd_a0 rs1_t1 rs2_x8 slli
    rd_a0 rs1_a1 rs2_a0 sub           ; byte = value % 256

    rd_a1 rs1_t1 mv                   ; value = value / 256
    rd_ra $fputc jal                  ; write value
    rd_a5 rs1_a5 !-1 addi             ; decrease number of bytes to write
    rs1_a5 @StorePointer_loop bnez    ; continue looping

    $Second_pass_loop jal             ; Continue looping

:StorePointer_1
    rd_a2 rs1_a1 mv                   ; save target
    rd_a1 ~scratch auipc
    rd_a1 rs1_a1 !scratch addi        ; Get scratch
    rd_ra $ClearScratch jal           ; clear scratch
    rd_ra $consume_token jal          ; consume token
    rd_ra $GetTarget jal              ; Get target
    rd_a1 rs1_a0 ld                   ; Dereference pointer
    rd_a1 rs1_a2 rs2_a1 sub           ; displacement = target - ip

    $StorePointer_0 jal               ; Continue looping

:Second_pass_done
    rd_ra rs1_sp ld                   ; restore ra
    rd_sp rs1_sp !8 addi              ; Deallocate stack
    rs1_ra jalr                       ; return

; Pad with zeros to align to word size
;   bool write in a1
:PadToAlign
    rd_t1 !1 addi                     ; t1 = 1
    rd_a0 rs1_s6 rs2_t1 and           ; ip & 0x1
    rs1_a0 rs2_t1 @PadToAlign_1 bne   ; check if ip & 0x1 == 1
    rd_s6 rs1_s6 rs2_t1 add           ; ip = ip + 1

    rs1_a1 @PadToAlign_1 bnez         ; check if we have to write
    rd_a0 mv                          ; a0 = 0
    rd_ra $fputc jal                  ; write 0

:PadToAlign_1
    rd_t1 !2 addi                     ; t1 = 2
    rd_a0 rs1_s6 rs2_t1 and           ; ip & 0x1
    rs1_a0 rs2_t1 @PadToAlign_2 bne   ; check if ip & 0x2 == 2
    rd_s6 rs1_s6 rs2_t1 add           ; ip = ip + 2

    rs1_a1 @PadToAlign_2 bnez         ; check if we have to write
    rd_a0 mv                          ; a0 = 0
    rd_ra $fputc jal                  ; write 0
    rd_a0 mv                          ; a0 = 0
    rd_ra $fputc jal                  ; write 0

:PadToAlign_2
    rs1_a1 @Second_pass_loop beqz     ; return to Second_pass
    $First_pass_loop jal              ; return to First_pass

; Zero scratch area
:ClearScratch
    rd_sp rs1_sp !-24 addi            ; Allocate stack
    rs1_sp rs2_ra sd                  ; protect ra
    rs1_sp rs2_a0 @8 sd               ; protect a0
    rs1_sp rs2_a1 @16 sd              ; protect a1

    rd_a0 ~scratch auipc
    rd_a0 rs1_a0 !scratch addi        ; Find where our scratch area is

:ClearScratch_loop
    rd_a1 rs1_a0 lb                   ; Read current byte: s[i]
    rs1_a0 sb                         ; Write zero: s[i] = 0
    rd_a0 rs1_a0 !1 addi              ; Increment: i = i + 1
    rs1_a1 @ClearScratch_loop bnez    ; Keep looping

    rd_ra rs1_sp ld                   ; restore ra
    rd_a0 rs1_sp !8 ld                ; restore a0
    rd_a1 rs1_sp !16 ld               ; restore a1
    rd_sp rs1_sp !24 addi             ; Deallocate stack
    rs1_ra jalr                       ; return

; Receives pointer in a1
; Writes our token and updates pointer in a1
:consume_token
    rd_sp rs1_sp !-8 addi             ; Allocate stack
    rs1_sp rs2_ra sd                  ; protect ra

:consume_token_0
    rd_ra $Read_byte jal              ; Read byte into a0

    ; Check for \t
    rd_t1 !0x9 addi
    rs1_a0 rs2_t1 @consume_token_done beq

    ; Check for \n
    rd_t1 !0xA addi
    rs1_a0 rs2_t1 @consume_token_done beq

    ; Check for ' '
    rd_t1 !0x20 addi
    rs1_a0 rs2_t1 @consume_token_done beq

    ; Check for >
    rd_t1 !0x3E addi
    rs1_a0 rs2_t1 @consume_token_done beq

    rs1_a1 rs2_a0 sb                  ; Store char
    rd_a1 rs1_a1 !1 addi              ; Point to next spot
    $consume_token_0 jal              ; Continue looping

:consume_token_done
    rs1_a1 sd                         ; Pad with nulls
    rd_a1 rs1_a1 !8 addi              ; Update the pointer

    rd_ra rs1_sp ld                   ; restore ra
    rd_sp rs1_sp !8 addi              ; Deallocate stack
    rs1_ra jalr                       ; return

; DoByte function
; Receives:
;   character in a0
;   bool write in a1
;   bool update in a2
; Does not return anything
:DoByte
    rd_sp rs1_sp !-16 addi            ; Allocate stack
    rs1_sp rs2_ra sd                  ; protect ra
    rs1_sp rs2_a6 @8 sd               ; protect a6

    rd_ra $hex jal                    ; Process hex, store it in a6

    rs1_a6 @DoByte_Done bltz          ; Deal with EOF and unrecognized characters

    rs1_s4 @DoByte_NotToggle bnez     ; Check if toggle is set

    ; toggle = true
    rs1_a1 @DoByte_1 bnez             ; check if we have to write

    ; write = true
    ; We calculate (hold * 16) + hex(c) ^ sr_nextb()
    ; First, calculate new shiftregister
    rd_t0 !0xFF addi
    rd_t0 rs1_s8 rs2_t0 and           ; sr_nextb = shiftregister & 0xff
    rd_s8 rs1_s8 rs2_x8 srliw         ; shiftregister >> 8

    rd_t0 rs1_t0 rs2_a6 xor           ; hex(c) ^ sr_nextb
    rd_t1 rs1_s5 rs2_x4 slli          ; hold << 4
    rd_a0 rs1_t0 rs2_t1 add           ; (hold << 4) + hex(c) ^ sr_nextb()
    rd_ra $fputc jal                  ; print it
    rs1_a0 @Fail beqz                 ; Fail if nothing was written

:DoByte_1
    rd_s6 rs1_s6 !1 addi              ; Increment IP
    rs1_a2 @DoByte_2 beqz             ; check if we have to update
:DoByte_2b
    rd_s5 mv                          ; hold = 0
    $DoByte_FlipToggle jal            ; return

:DoByte_NotToggle
    rd_s5 rs1_a6 mv                   ; hold = hex(c)

:DoByte_FlipToggle
    rd_s4 rs1_s4 not                  ; Flip the toggle

:DoByte_Done
    rd_ra rs1_sp ld                   ; restore ra
    rd_a6 rs1_sp !8 ld                ; restore a6
    rd_sp rs1_sp !16 addi             ; Deallocate stack
    rs1_ra jalr                       ; return

:DoByte_2
    rd_t1 rs1_s5 rs2_x4 slli          ; hold * 16
    rd_s5 rs1_t1 rs2_a6 add           ; hold = hold * 16 + hex(c)
    rd_t1 rs1_s7 rs2_x8 slli          ; tempword << 8
    rd_s7 rs1_t1 rs2_s5 xor           ; tempword = (tempword << 8) ^ hold
    rd_s10 rs1_s10 !1 addi            ; updates = updates + 1
    $DoByte_2b jal

; Convert ASCII hex characters into binary representation, e.g. 'a' -> 0xA
; Receives:
;   character in a0
; Returns:
;   a6 with character's hex value.
:hex
    rd_sp rs1_sp !-16 addi            ; Allocate stack
    rs1_sp rs2_ra sd                  ; protect ra
    rs1_sp rs2_a1 @8 sd               ; protect a1

    ; Deal with EOF
    rd_t1 !-4 addi
    rs1_a0 rs2_t1 @hex_return beq

    ; deal with line comments starting with #
    rd_t1 !0x23 addi
    rs1_a0 rs2_t1 @ascii_comment beq  ; a0 eq to '#'

    ; deal with line comments starting with ;
    rd_t1 !0x3B addi
    rs1_a0 rs2_t1 @ascii_comment beq  ; a0 eq to ';'

    ; deal all ascii less than 0
    rd_t1 !0x30 addi
    rs1_a0 rs2_t1 @ascii_other blt

    ; deal with 0-9
    rd_t1 !0x3A addi
    rs1_a0 rs2_t1 @ascii_num blt

    ; deal with all ascii less than A
    rd_t1 !0x41 addi
    rs1_a0 rs2_t1 @ascii_other blt

    ; deal with A-F
    rd_t1 !0x47 addi
    rs1_a0 rs2_t1 @ascii_high blt

    ; deal with all ascii less than a
    rd_t1 !0x61 addi
    rs1_a0 rs2_t1 @ascii_other blt

    ; deal with a-f
    rd_t1 !0x67 addi
    rs1_a0 rs2_t1 @ascii_low blt

    ; The rest that remains needs to be ignored
    $ascii_other jal

:ascii_num
    rd_t1 !0x30 addi                  ; '0' -> 0
    rd_a6 rs1_a0 rs2_t1 sub
    $hex_return jal                   ; return
:ascii_low
    rd_t1 !0x57 addi                  ; 'a' -> 0xA
    rd_a6 rs1_a0 rs2_t1 sub
    $hex_return jal                   ; return
:ascii_high
    rd_t1 !0x37 addi                  ; 'A' -> 0xA
    rd_a6 rs1_a0 rs2_t1 sub
    $hex_return jal                   ; return
:ascii_other
    rd_a6 !-1 addi                    ; Return -1
    $hex_return jal                   ; return
:ascii_comment                        ; Read the comment until newline
    rd_ra $Read_byte jal
    rd_t1 !0xD addi                   ; CR
    rs1_a0 rs2_t1 @ascii_comment_cr beq
    rd_t1 !0xA addi                   ; LF
    rs1_a0 rs2_t1 @ascii_comment bne  ; Keep reading comment
:ascii_comment_cr
    rd_a6 !-1 addi                    ; Return -1
:hex_return
    rd_ra rs1_sp ld                   ; restore ra
    rd_a1 rs1_sp !8 ld                ; restore a1
    rd_sp rs1_sp !16 addi             ; Deallocate stack
    rs1_ra jalr                       ; return

; Read byte into a0
:Read_byte
    rd_sp rs1_sp !-24 addi            ; Allocate stack
    rs1_sp rs2_a1 @8 sd               ; protect a1
    rs1_sp rs2_a2 @16 sd              ; protect a2

    rd_a7 !63 addi                    ; sys_read
    rd_a0 rs1_s2 mv                   ; File descriptor
    rd_a1 rs1_sp mv                   ; Get stack address for buffer
    rd_a2 !1 addi                     ; Size of what we want to read
    ecall                             ; syscall

    rs1_a0 @Read_byte_1 beqz          ; Deal with EOF
    rd_a0 rs1_a1 lbu                  ; return char in a0

    $Read_byte_done jal               ; return

:Read_byte_1
    rd_a0 !-4 addi                    ; Put EOF in a0
:Read_byte_done
    rd_a1 rs1_sp !8 ld                ; restore a1
    rd_a2 rs1_sp !16 ld               ; restore a2
    rd_sp rs1_sp !24 addi             ; Deallocate stack
    rs1_ra jalr                       ; return

; Find a label matching pointer in scratch
; Returns a pointer in a0
:GetTarget
    rd_sp rs1_sp !-8 addi             ; Allocate stack
    rs1_sp rs2_ra sd                  ; protect ra

    rd_t0 rs1_s1 mv                   ; grab jump_table

:GetTarget_loop_0
    ; Compare the strings
    rd_t1 ~scratch auipc
    rd_t1 rs1_t1 !scratch addi        ; reset scratch
    rd_t2 rs1_t0 !16 ld               ; I->name
:GetTarget_loop
    rd_t4 rs1_t2 lbu                  ; I->name[i]
    rd_t3 rs1_t1 lbu                  ; scratch[i]
    rs1_t3 rs2_t4 @GetTarget_miss bne ; strings don't match

    ; Look at the next char
    rd_t1 rs1_t1 !1 addi
    rd_t2 rs1_t2 !1 addi
    rs1_t4 @GetTarget_loop bnez       ; Loop until zero (end of string)
    $GetTarget_done jal               ; We have a match

:GetTarget_miss
    rd_t0 rs1_t0 ld                   ; I = I->next
    rs1_t0 @Fail beqz                 ; Abort, no match found

    $GetTarget_loop_0 jal             ; Try another label

:GetTarget_done
    rd_a0 rs1_t0 !8 addi              ; Get target address

    rd_ra rs1_sp ld                   ; restore ra
    rd_sp rs1_sp !8 addi              ; Deallocate stack
    rs1_ra jalr                       ; return

:StoreLabel
    rd_sp rs1_sp !-8 addi             ; Allocate stack
    rs1_sp rs2_ra sd                  ; protect ra

    rd_a0 rs1_s9 mv                   ; struct entry
    rd_s9 rs1_s9 !24 addi             ; calloc
    rs1_a0 rs2_s6 @8 sd               ; entry->target = ip
    rs1_a0 rs2_s1 sd                  ; entry->next = jump_table
    rd_s1 rs1_a0 mv                   ; jump_table = entry
    rs1_a0 rs2_s9 @16 sd              ; entry->name = token
    rd_a1 rs1_s9 mv                   ; Write after struct
    rd_ra $consume_token jal          ; Collect string
    rd_s9 rs1_a1 mv                   ; update HEAP

    rd_ra rs1_sp ld                   ; restore ra
    rd_sp rs1_sp !8 addi              ; Deallocate stack
    $First_pass_loop jal              ; return

; fputc function
; Receives CHAR in a0
; Writes and returns number of bytes written in a0
:fputc
    rd_sp rs1_sp !-32 addi            ; allocate stack
    rs1_sp rs2_a0 sd                  ; protect a0
    rs1_sp rs2_ra @8 sd               ; protect ra
    rs1_sp rs2_a1 @16 sd              ; protect a1
    rs1_sp rs2_a2 @24 sd              ; protect a2

    rd_a7 !64 addi                    ; sys_write
    rd_a0 rs1_s3 mv                   ; write to output
    rd_a1 rs1_sp mv                   ; Get stack address
    rd_a2 !1 addi                     ; write 1 character
    ecall                             ; syscall

    rd_ra rs1_sp !8 ld                ; restore ra
    rd_a1 rs1_sp !16 ld               ; restore a1
    rd_a2 rs1_sp !24 ld               ; restore a2
    rd_sp rs1_sp !32 addi             ; deallocate stack
    rs1_ra jalr                       ; return


:Fail
    ; Terminate program with 1 return code
    rd_a7 !93 addi                    ; sys_exit
    rd_a0 !1 addi                     ; Return code 1
    ecall                             ; exit(1)
# PROGRAM END

:scratch
    %0

:ELF_end

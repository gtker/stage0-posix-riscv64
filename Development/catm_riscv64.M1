## Copyright (C) 2021 Andrius Å tikonas
## This file is part of stage0.
##
## stage0 is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## stage0 is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY# without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with stage0.  If not, see <http://www.gnu.org/licenses/>.

DEFINE add   33000000
DEFINE addi  13000000
DEFINE ld    03300000
DEFINE jal   6F000000
DEFINE ecall 73000000
DEFINE beq   63000000
DEFINE blt   63400000
DEFINE lui   37000000

DEFINE rd_sp  .00010000
DEFINE rd_s1  .80040000
DEFINE rd_s2  .00090000
DEFINE rd_s3  .80090000
DEFINE rd_s4  .000A0000
DEFINE rd_a0  .00050000
DEFINE rd_a1  .80050000
DEFINE rd_a2  .00060000
DEFINE rd_a3  .80060000
DEFINE rd_a7  .80080000

DEFINE rs1_sp  .00000100
DEFINE rs1_s1  .00800400
DEFINE rs1_s2  .00000900
DEFINE rs1_s3  .00800900
DEFINE rs1_s4  .00000A00
DEFINE rs1_a0  .00000500
DEFINE rs1_a1  .00800500

DEFINE rs2_a1  .0000B000
DEFINE rs2_a2  .0000C000

; Where the ELF Header is going to hit
; Simply jump to _start
; Our main function
:_start

# Register use:
# s1: output file descriptor
# s2: buffer
# s3: input file descriptor
# s4: number of bytes read

# Open output file and store the FD in s1
    rd_a7 !56 addi                    ; sys_openat
    rd_a0 !-100 addi                  ; AT_FDCWD
    rd_sp rs1_sp !16 addi             ; Prepare stack for reading output file
    rd_a1 rs1_sp ld                   ; Output file (argument 1)
    rd_a2 !577 addi                   ; Prepare file as O_WRONLY|O_CREAT|O_TRUNC
    rd_a3 !384 addi                   ; Prepare file as RW for owner only (600 in octal)
    ecall                             ; syscall
    rd_s1 rs1_a0 addi                 ; Save fd in for later

    # Prepare heap memory
    rd_a7 !214 addi                   ; sys_brk
    rd_a0 addi                        ; Get current brk
    ecall                             ; syscall
    rd_s2 rs1_a0 addi                 ; Set our malloc pointer

    rd_a1 ~0x100000 lui               ; a1=1MiB
    rd_a0 rs1_a0 rs2_a1 add           ; Allocate 1MiB
    ecall                             ; syscall

:core
    rd_sp rs1_sp !8 addi              ; Move stack pointer to next input file
    rd_a1 rs1_sp ld                   ; Get the input file name
    rs1_a1 @Done beq                  ; This was the last file, we are done

    rd_a7 !56 addi                    ; sys_openat
    rd_a0 !-100 addi                  ; AT_FDCWD
    rd_a2 addi                        ; read only
    ecall                             ; syscall
    rd_s3 rs1_a0 addi                 ; protect input fd

:keep
    rd_a7 !63 addi                    ; sys_read
    rd_a0 rs1_s3 addi                 ; input fd
    rd_a1 rs1_s2 addi                 ; read into buffer
    rd_a2 ~0x100000 lui               ; read 1MiB
    ecall                             ; syscall
    rd_s4 rs1_a0 addi                 ; actual number of bytes read

    rd_a7 !64 addi                    ; sys_write
    rd_a0 rs1_s1 addi                 ; output fd
    rd_a1 rs1_s2 addi                 ; write from buffer
    rd_a2 rs1_s4 addi                 ; number of bytes to write
    ecall                             ; syscall

    rd_a2 ~0x100000 lui               ; 1MiB
    rs1_s4 rs2_a2 @keep beq           ; keep looping if buffer was full
    $core jal                         ; otherwise move to next file

:Done
    # Terminate program with 0 return code
    rd_a7 !93 addi                    ; sys_exit
    rd_a0 addi                        ; Return code 0
    ecall                             ; exit(0)

:ELF_end
